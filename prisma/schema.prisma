// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

enum SchedulingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum Plan {
  BASIC // plano inicial de R$59,90 podendo registrar de 1 até 4 funcionários, mais gestão financeira básica
  STANDART // plano intermediário de R$99,90 podendo registrar de 1 até 8 funcionários, mais gestão financeira básica, mais gestão de Marketing
  PREMIUM // plano avançado de R$129,90 podendo registrar funcionários ilimitado, mais gestão financeira avançada, mais gestão de Marketing, mais criação de Site 
}

enum DayOfWeek {
  SUNDAY
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
}

enum CompanyStatus {
  PENDING
  ACTIVE
  BLOCKED
  DELETED
}

enum Status {
  ACTIVE
  BLOCKED
  DELETED
}

model Owner {
  id BigInt @id @default(autoincrement())
  name String? @db.String(255)
  email String @unique @db.String(255)
  phone String @db.String(15)
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @default(now()) @db.Timestamp(6)
  Companies Company[]

  @@index([email])
}

model Company {
  id BigInt @id @default(autoincrement())
  name String @db.String(255)
  address String @db.String(255)
  companyValuation Decimal @db.Decimal(2, 1) 
  plan Plan @default(BASIC)
  companyStatus CompanyStatus
  dateToActiveProfile DateTime
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @default(now()) @db.Timestamp(6)
  owner Owner @relation(fields: [ownerId], references: [id])
  ownerId BigInt
  Services Service[]
  Employees Employee[]
  Customers CustomerCompany[]
  FavoritedBy CustomerFavoriteCompany[]
  Schedules Scheduling[]
  OperatingHours OperatingHours[]
  ClosedDays ClosedDays[]
  Needs CompanyNeed[]
}

model Employee {
  id BigInt @id @default(autoincrement())
  name String @db.String(255)
  email String @unique @db.String(255)
  phone String? @db.String(15)
  office String? @db.String(100)
  status Status
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @default(now()) @db.Timestamp(6)
  company Company @relation(fields: [companyId], references: [id])
  companyId BigInt
  Services EmployeeService[]
  Schedules Scheduling[]

  @@index([email])
}

model Service {
  id BigInt @id @default(autoincrement())
  name String @db.String(255)
  price Decimal @db.Decimal(10, 2)
  company Company @relation(fields: [companyId], references: [id])
  companyId BigInt
  Employees EmployeeService[]
  Schedules Scheduling[]
}

model EmployeeService {
  employeeId BigInt
  serviceId BigInt
  Employee Employee @relation(fields: [employeeId], references: [id])
  Service Service @relation(fields: [serviceId], references: [id])

  @@id([employeeId, serviceId])
}

model Customer {
  id BigInt @id @default(autoincrement())
  name String @db.String(255)
  email String @unique @db.String(255)
  address String @db.String(255)
  phone String? @db.String(15)
  status Status
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @default(now()) @db.Timestamp(6)
  Schedules Scheduling[]
  Companies CustomerCompany[]
  Favorites CustomerFavoriteCompany[]

  @@index([email])
}

model CustomerCompany {
  customerId BigInt
  companyId BigInt
  customer Customer @relation(fields: [customerId], references: [id])
  company Company @relation(fields: [companyId], references: [id])

  @@id([customerId, companyId])
}

model CustomerFavoriteCompany {
  customerId BigInt
  companyId BigInt
  customer Customer @relation(fields: [customerId], references: [id])
  company Company @relation(fields: [companyId], references: [id])

  @@id([customerId, companyId])
}

model Scheduling {
  id BigInt @id @default(autoincrement())
  date DateTime
  status SchedulingStatus @default(PENDING)
  customer Customer @relation(fields: [customerId], references: [id])
  customerId BigInt
  company Company @relation(fields: [companyId], references: [id])
  companyId BigInt
  service Service @relation(fields: [serviceId], references: [id])
  serviceId BigInt
  employee Employee @relation(fields: [employeeId], references: [id])
  employeeId BigInt
}

model OperatingHours {
  id BigInt @id @default(autoincrement())
  company Company @relation(fields: [companyId], references: [id])
  companyId BigInt
  dayOfWeek DayOfWeek
  openTime DateTime @db.Time
  closeTime DateTime @db.Time
  openTimeInterval DateTime @db.Time
  closeTimeInterval DateTime @db.Time
}

model ClosedDays {
  id BigInt @id @default(autoincrement())
  company Company @relation(fields: [companyId], references: [id])
  companyId BigInt
  dayOfWeek DayOfWeek
  openTime DateTime @db.Time
  closeTime DateTime @db.Time
}

model CompanyNeedTag {
  id BigInt @id @default(autoincrement())
  tag String @db.String(255)
  Needs CompanyNeed[]
}

model CompanyNeed {
  id BigInt @id @default(autoincrement())
  company Company @relation(fields: [companyId], references: [id])
  companyId BigInt
  tag CompanyNeedTag? @relation(fields: [tagId], references: [id])
  tagId BigInt?
  customText String?
}